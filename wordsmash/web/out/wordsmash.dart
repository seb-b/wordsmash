// Auto-generated from wordsmash.html.
// DO NOT EDIT.

library wordsmash_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'dart:json';
import 'package:js/js.dart' as js;


// Original code


final __changes = new __observe.Observable();

String __$word;
String get word {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'word');
  }
  return __$word;
}
set word(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'word',
        __$word, value);
  }
  __$word = value;
}
String __$sentence;
String get sentence {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'sentence');
  }
  return __$sentence;
}
set sentence(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'sentence',
        __$sentence, value);
  }
  __$sentence = value;
}
String __$definition = "loading";
String get definition {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'definition');
  }
  return __$definition;
}
set definition(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'definition',
        __$definition, value);
  }
  __$definition = value;
}
int __$pageNumber = 1;
int get pageNumber {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'pageNumber');
  }
  return __$pageNumber;
}
set pageNumber(int value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'pageNumber',
        __$pageNumber, value);
  }
  __$pageNumber = value;
}

//TODO: arrays for pages(could be combined into object/JSON
List sentences = new List();
List words = new List();
List definitions = new List();
bool newWord = true;


void main() {
  getWord();
}

void getWord()
{
  if(newWord)
  {
  String url = "http://api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=false&minCorpusCount=0&maxCorpusCount=-1&minDictionaryCount=1&maxDictionaryCount=-1&minLength=5&maxLength=-1&api_key=9426b5f9c67e03853f5410a188e06bc4136900201e3fd92eb";
  var request = HttpRequest.getString(url).then(response);
  }
  newWord = true;
}

void getPropernoun()
{
  String url = "http://api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=false&includePartOfSpeech=proper-noun&minCorpusCount=0&maxCorpusCount=-1&minDictionaryCount=1&maxDictionaryCount=-1&minLength=5&maxLength=-1&api_key=9426b5f9c67e03853f5410a188e06bc4136900201e3fd92eb";
  var request = HttpRequest.getString(url).then(response);
}

void response(String response)
{
  Map data = parse(response);
  word = data["word"];
  loadWordDefinition(word);
}

void loadWordDefinition(String word) {
  var url = "http://api.pearson.com/v2/dictionaries/entries?headword="+word+"&apikey=9b7305c0523c3902ec01b44e5a5c53ad";

  // call the web server asynchronously
  var request = HttpRequest.getString(url).then(onDataLoaded);
}

void onDataLoaded(String response) {
  Map data = parse(response);
  if(data["count"] == 0)
  {
    print("Word not found: " + word);
    getWord();  
  }
  
  else
  {
    //TODO: multiple definitions, other info
    try{
      List results = data["results"];
      var firstResult = results[0];
      var senses = firstResult["senses"];
      definition = senses[0]["definition"];
    if(definition == null)
    {
      getWord();
    }
    } catch(e)
    {
      getWord();
    }
    
  }
}
void newPage()
{
  if(sentence != null && sentence.indexOf(word) != -1)
  {
    query("#new-page-message").text = "";
    save();
  }else
  {
    query("#new-page-message").text = "You didn't use your word, dingus";
  }
}

void getGoogleImage()
{ 
  js.scoped(() {
    // create a top-level JavaScript function called myJsonpCallback
    js.context.myJsonpCallback = new js.Callback.once( (response) {
      print(response);
      print(response.responseText);
    });

    // add a script tag for the api required
    ScriptElement script = new Element.tag("script");
    // add the callback function name to the URL
    script.src = "http://ajax.googleapis.com/ajax/services/search/images?v=1.0&rsz=1&q="+word+"&callback=myJsonpCallback";
    document.body.children.add(script); // add the script to the DOM
  });
}

void processSearchResponse(String response)
{
  Map data = parse(response);
  print(data);
}

void save()
{
 sentences.add(sentence);
 words.add(word);
 definitions.add(definition);
 print(sentences);
 print(words);
 print(definitions);
 pageNumber++;
 getWord();
 sentence = null;
}

void previousPage()
{
  pageNumber--;
  int index = pageNumber - 1;
  sentence = sentences[index];
  sentences.removeAt(index);
  word = words[index];
  words.removeAt(index);
  definition = definitions[index];
  definitions.removeAt(index);
  newWord = false;
}



// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  var __e1, __e10, __e3, __e4, __e5, __e6, __e7, __e9;
  var __t = new autogenerated.Template(__root);
  __e1 = __root.nodes[3].nodes[1];
  var __binding0 = __t.contentBind(() => word, false);
  __e1.nodes.addAll([new autogenerated.Text('Your word is: '),
      __binding0]);
  __e3 = __root.nodes[3].nodes[3];
  var __binding2 = __t.contentBind(() => pageNumber, false);
  __e3.nodes.addAll([new autogenerated.Text('page '),
      __binding2]);
  __e4 = __root.nodes[3].nodes[5];
  __t.listen(__e4.onClick, ($event) { getWord(); });
  __e5 = __root.nodes[7];
  __t.listen(__e5.onInput, ($event) { sentence = __e5.value; });
  __t.oneWayBind(() => sentence, (e) { if (__e5.value != e) __e5.value = e; }, false, false);
  __e6 = __root.nodes[9];
  __t.listen(__e6.onClick, ($event) { previousPage(); });
  __e7 = __root.nodes[11];
  __t.listen(__e7.onClick, ($event) { newPage(); });
  __e9 = __root.nodes[15];
  var __binding8 = __t.contentBind(() => definition, false);
  __e9.nodes.add(__binding8);
  __e10 = __root.nodes[17];
  __t.listen(__e10.onClick, ($event) { getGoogleImage(); });
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=wordsmash.dart.map